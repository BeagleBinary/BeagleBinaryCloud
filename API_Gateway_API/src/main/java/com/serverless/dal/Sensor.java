package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.Priority;

import javax.ws.rs.NotFoundException;

@DynamoDBTable(tableName = "SENSOR_TABLE_NAME")
public class Sensor {
    private static final String SENSOR_TABLE_NAME = System.getenv("SENSOR_TABLE_NAME");
    private static final String DATA_TABLE_NAME = System.getenv("DATA_TABLE_NAME");
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper sensorMapper;
    private final DynamoDBMapper dataMapper;
    private Logger logger = Logger.getLogger(this.getClass());

    //Sensor data

    private String id;
    private String userId;
    private String externalAddress;

    private List<String> roomIdList = new ArrayList<>();


    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {

        this.id = id;
    }



    @DynamoDBAttribute(attributeName = "userId")
    public String getUserId() {
        return this.userId;
    }
    public void setUserId(String userId) {

        this.userId = userId;
    }


    @DynamoDBAttribute(attributeName = "externalAddress")
    public String getExternalAddress() {
        return this.externalAddress;
    }
    public void setExternalAddress(String address) {

        this.externalAddress = address;
    }


    public Sensor() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(SENSOR_TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.sensorMapper = this.db_adapter.createDbMapper(mapperConfig);


        DynamoDBMapperConfig roomMapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(DATA_TABLE_NAME))
                .build();
        // get the db adapter

        // create the mapper with config
        this.dataMapper = this.db_adapter.createDbMapper(roomMapperConfig);
    }

    @Override
    public String toString() {
        return String.format("Sensor [ID=%s, Name=%s]",
                this.id, this.userId);
    }


    public void save(Sensor sensor) throws IOException {
        logger.info("Sensor - save(): " + sensor.toString());
        this.sensorMapper.save(sensor);

    }



    public Sensor get(String id) throws IOException {
        Sensor sensor = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Sensor> queryExp = new DynamoDBQueryExpression<Sensor>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Sensor> result = this.sensorMapper.query(Sensor.class, queryExp);
        if (result.size() > 0) {
            sensor = result.get(0);
            logger.info("Sensor - get(): sensor - " + sensor.toString());
        } else {
            logger.info("Sensor - get(): sensor - Not Found.");
        }
        return sensor;
    }


    public Sensor getByAddress(String address) throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Sensor> results = this.sensorMapper.scan(Sensor.class, scanExp);
        for (Sensor sensor : results) {
            if(sensor.externalAddress.equals(address)){
                return sensor;
            }
        }
        return null;
    }


    public List<Sensor> getByUserId(String userId) throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Sensor> results = this.sensorMapper.scan(Sensor.class, scanExp);
        List<Sensor> toReturn = new ArrayList<>();

        for (Sensor sensor : results) {

            if(sensor.userId.equals(userId)){
                toReturn.add(sensor);
            }
        }

        return toReturn;
    }

    public Boolean delete(String id) throws IOException {
        Sensor sensor = null;

        // get product if exists
        sensor = get(id);
        if (sensor != null) {
            logger.info("Sensor - delete(): " + sensor.toString());
            this.sensorMapper.delete(sensor);
        } else {
            logger.info("Sensors - delete(): sensor - does not exist.");
            return false;
        }
        return true;
    }

    public List<Sensor> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Sensor> results = this.sensorMapper.scan(Sensor.class, scanExp);
        for (Sensor sensor : results) {
            logger.info("Sensor - list(): " + sensor.toString());
        }
        return results;
    }


}
