package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "DATA_TABLE_NAME")
public class SensorData {
    /*
    ID
    SensorId
    SensorSerial
    TimeStamp
    Data
     */
    private static final String DATA_TABLE_NAME = System.getenv("DATA_TABLE_NAME");
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;

    private final DynamoDBMapper dataMapper;
    private Logger logger = Logger.getLogger(this.getClass());


    private String id;

    private String sensorId;

    private String timeStamp;

    private double data;

    private int dataType;
    private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");


    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    @DynamoDBAttribute
    public String getTimeStamp() {
        return this.timeStamp;
    }

    @DynamoDBAttribute
    public double getData() {
        return this.data;
    }

    @DynamoDBAttribute
    public String getSensorId() {
        return this.sensorId;
    }

    @DynamoDBAttribute
    public int getDataType() {
        return this.dataType;
    }


    public void setId(String id){
        this.id = id;
    }
    public void setTimeStamp(String timeStamp){
        this.timeStamp = timeStamp;
    }
    public void setData(double data){
        this.data = data;
    }
    public void setSensorId(String sensorId){
        this.sensorId = sensorId;
    }
    public void setDataType(int dataType){
        this.dataType = dataType;
    }


    public SensorData(){
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(DATA_TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.dataMapper = this.db_adapter.createDbMapper(mapperConfig);


        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        timeStamp = sdf.format(timestamp);
        data = 0;

    }

    public void save(SensorData sensorData) throws IOException {
        logger.info("SensorData - save(): " + sensorData.toString());
        this.dataMapper.save(sensorData);

    }

    public SensorData get(String id) throws IOException {
        SensorData data = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<SensorData> queryExp = new DynamoDBQueryExpression<SensorData>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<SensorData> result = this.dataMapper.query(SensorData.class, queryExp);
        if (result.size() > 0) {
            data = result.get(0);
            logger.info("Sensor - get(): sensor - " + data.toString());
        } else {
            logger.info("Sensor - get(): sensor - Not Found.");
        }
        return data;
    }

    public Boolean delete(String id) throws IOException {
        SensorData data = null;

        // get product if exists
        data = get(id);
        if (data != null) {
            logger.info("Sensor Data - delete(): " + data.toString());
            this.dataMapper.delete(data);
        } else {
            logger.info("Sensor delete - delete(): data - does not exist.");
            return false;
        }
        return true;
    }

    public List<SensorData> getSensorData(String sensorId) throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<SensorData> results = this.dataMapper.scan(SensorData.class, scanExp);
        List<SensorData> toReturn = new ArrayList<>();
        for (SensorData data : results) {
            logger.info("Sensor - list(): " + data.toString());
            if(data.getSensorId().equals(sensorId))
            {
                logger.info("Adding sensor data to list " + data.toString());
                toReturn.add(data);
            }
        }
        return toReturn;
    }


    @Override
    public String toString() {
        return String.format("Sensor Data [ID=%s,Sensor=%s Data=%s]",
                this.id, this.sensorId, this.data);
    }

}
