package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ResourceNotFoundException;
import org.apache.log4j.Logger;

import javax.jws.soap.SOAPBinding;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

import java.security.Key;
import java.security.SecureRandom;

@DynamoDBTable(tableName = "USER_TABLE_NAME")
public class User {

    private static final String USER_TABLE_NAME = System.getenv("USER_TABLE_NAME");
    //private static final String DATA_TABLE_NAME = System.getenv("DATA_TABLE_NAME");
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper userMapper;

    private Logger logger = Logger.getLogger(this.getClass());


    private String id;
    private String userName;
    private String firstName;
    private String lastName;
    private String emailAddress;
    private String phoneNumber;
    private String password;
    
    private String accessKey;
    private long keyExpirationTime;


    private List<String> deviceIds;

    public User(){
        userName = "";
        firstName= "";
        lastName= "";
        emailAddress= "";
        phoneNumber= "";
        password= "";

        this.accessKey = "";
        this.keyExpirationTime = 0;


        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USER_TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.userMapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public User(String userName, String firstName, String lastName, String emailAddress,
                     String phoneNumber, String password) {



        this.userName = userName;
        this.firstName = firstName;
        this.lastName = lastName;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.password = password;
        this.accessKey = "";
        this.keyExpirationTime = 0;


        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USER_TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.userMapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    @DynamoDBAttribute
    public String getUserName() {
        return this.userName;
    }

    @DynamoDBAttribute
    public String getFirstName() {
        return this.firstName;
    }

    @DynamoDBAttribute
    public String getLastName() {
        return this.lastName;
    }

    @DynamoDBAttribute
    public String getEmailAddress() { return this.emailAddress; }

    @DynamoDBAttribute
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    @DynamoDBAttribute
    public String getPassword() {
        return this.password;
    }

    @DynamoDBAttribute
    public String getAccessKey() {
        return this.accessKey;
    }

    @DynamoDBAttribute
    public long getKeyExpirationTime() {
        return this.keyExpirationTime;
    }


    public void setId(String id){
        this.id = id;
    }
    public void setUserName(String userName) {
        this.userName = userName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public void setAccessKey(String key) throws Exception {

        KeyGenerator keyGen = KeyGenerator.getInstance("DES");

        //Creating a SecureRandom object
        SecureRandom secRandom = new SecureRandom();

        //Initializing the KeyGenerator
        keyGen.init(secRandom);

        //Creating/Generating a key
        Key generatedKey = keyGen.generateKey();

        String encodedKey = Base64.getEncoder().encodeToString(generatedKey.getEncoded());

        this.accessKey = encodedKey;

        setKeyExpirationTime(0);
    }


    public void setKeyExpirationTime(long keyExpirationTime) {

        //Set expiration time to current time + 3 hours
        this.keyExpirationTime = System.currentTimeMillis() + 10800000;
    }


    public void save(User user) throws IOException {
        logger.info("Sensor - save(): " + user.toString());
        this.userMapper.save(user);
    }


    public User get(String id) throws IOException {
        User user = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<User> queryExp = new DynamoDBQueryExpression<User>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<User> result = this.userMapper.query(User.class, queryExp);
        if (result.size() > 0) {
            user = result.get(0);
            logger.info("Sensor - get(): sensor - " + user.toString());
        } else {
            logger.info("Sensor - get(): sensor - Not Found.");
        }
        return user;
    }


    public Boolean delete(String id) throws IOException {
        User user = null;

        // get product if exists
        user = get(id);
        if (user != null) {
            logger.info("User - delete(): " + user.toString());
            this.userMapper.delete(user);
        } else {
            logger.info("User - delete(): user - does not exist.");
            return false;
        }
        return true;
    }


    public List<User> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<User> results = this.userMapper.scan(User.class, scanExp);
        for (User user : results) {
            logger.info("User - list(): " + user.toString());
        }
        return results;
    }


    public User getUserByPassword(String userName, String password) throws IOException{
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<User> results = this.userMapper.scan(User.class, scanExp);
        for (User user : results) {
            if(user.userName.equals(userName) && user.password.equals(password))
            {
                return user;
            }
        }
        throw new ResourceNotFoundException("The requested user could not be found");

    }


    @Override
    public String toString() {
        return String.format("User [ID=%s,userName=%s firstName=%s,lastName=%s emailAddress=%s, phoneNumber=%s password=%s]",
                this.id, this.userName, this.firstName, this.lastName, this.emailAddress, this.phoneNumber, this.password);
    }
}
